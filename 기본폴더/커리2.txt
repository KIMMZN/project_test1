create table aaa(
id varchar(20) primary key,
name varchar(30),
tel varchar(13)
);



insert into aaa values('111','222','333');
select * from aaa;
commit;
desc aaa;

insert into aaa values('김시온','222','333');

delete from aaa;

desc kboard;

show databases;

-- 시퀀스, 프로시져 만들어보자
-- innodb =따로 스토리지 엔진을 명시하지 않으면 default로 설정되는 스토리지 엔진임
CREATE TABLE sequences (
    name VARCHAR(32) NOT NULL,
    currval BIGINT UNSIGNED NOT NULL,
    PRIMARY KEY (name)
) ENGINE = InnoDB;



DELIMITER $$

CREATE PROCEDURE `create_sequence` (IN tname VARCHAR(32))
MODIFIES SQL DATA
DETERMINISTIC
BEGIN
    DELETE FROM sequences WHERE name = tname;
    INSERT INTO sequences (name, currval) VALUES (tname, 0);
END$$

DELIMITER ;


DELIMITER $$

CREATE FUNCTION `nextval1` (tname VARCHAR(32))
RETURNS BIGINT UNSIGNED
MODIFIES SQL DATA
DETERMINISTIC
BEGIN
    DECLARE ret BIGINT UNSIGNED;
    UPDATE sequences SET currval = currval + 1 WHERE name = tname;
    SELECT currval INTO ret FROM sequences WHERE name = tname;
    RETURN ret;
END$$

DELIMITER ;

call create_sequence('test');

INSERT INTO asdf VALUES ((SELECT nextval1('test')from dual),"시온");

select * from asdf;

INSERT INTO asd VALUES ((SELECT nextval('test')));










-- MODIFIESSQL data
DELIMITER $$

create procedure `create_sequence` (in tname text)	
modifies sql data
deterministic
begin
	delete from sequences where name = tname;
	insert into sequences values(tname, 0);
end	 

$$
delimiter $$

drop table sequences;



DELIMITER $$

create function `nextval` (tname varchar(32))
returns bigint unsigned
modifies sql data
deterministic
begin
	declare ret bigint unsigned;
	update sequences set currval=currval+1 where name=tname;
	select currval into ret from sequences where name=tname limit 1;
	return ret;
end

$$
DELIMITER $$


create function `nextval` (the_name varchar(32))
returns bigint unsigned
modifies sql data
deterministic
begin
	declare ret bigint unsigned;
	update sequences set currval=currval+1 where name=the_name;
	select currval into ret from sequences where name=the_name limit 1;
	return ret;
end

delimiter;




DELIMITER $$
create function `nextval`(the_name varchar(32))
returns bigint unsigned
MODIFIES SQL DATA
deterministic
begin
	declare ret bigint unsigned;
	update sequences set currval=currval+1 where name = the_name;
	select currval into ret from sequences where name = the_name limit 1;	
    return ret;
end
	
$$

	call create_sequence('test');
	call create_sequence('test1');

select * from SEQUENCES;




desc sequences;

create sequence test_seq -- 시퀸스명:test_seq-eq
increment by 1
start with 1
minvalue 1
maxvalue 99999
nocycle
cache;


drop table `sequences`; 


select nextval('test1') from dual;


select 1 from dual;
use ecommerce;

create table asd (
num int
);

create table asdf(
num int,
id varchar(5)
);

insert into asdf values(12, 'fdg');

delimiter //
insert into asd values((select nextval('test') from dual));
// delimiter ;
insert into asd values(1);

use ecommerce;
grant all privileges on ecommerce.* to root@'%'

INSERT INTO asd VALUES (SELECT nextval('test'));

INSERT INTO asd VALUES ((SELECT nextval('test')));


sHOW PROCEDURE STATUS WHERE Db = 'ecommerce';
SHOW FUNCTION STATUS WHERE Db = 'ecommerce';

SELECT * FROM sequences WHERE name = 'test';


SHOW VARIABLES LIKE 'log_bin_trust_function_creators';

SHOW GLOBAL VARIABLES LIKE 'LOG_BIN_TRUST_FUNCTION_CREATORS';
SET GLOBAL LOG_BIN_TRUST_FUNCTION_CREATORS = 1;

SELECT @@GLOBAL.sql_mode;

SET GLOBAL sql_mode = 'NO_ENGINE_SUBSTITUTION';






DELIMITER $$

CREATE FUNCTION add_numbers(a INT, b INT)
RETURNS INT
DETERMINISTIC
BEGIN
    RETURN a + b;
END$$

DELIMITER ;

SELECT add_numbers(5, 10);

SELECT nextval('test');

create table test11 (
today date default (current_date)
);



insert into test11 values (default);


select * from test11;


show databases;
use ecommerce;

use cis_finalproject;

create database CIS_FinalProject;

-- 여기서부터
select * from schemata;

show full columns from text11;



show character set;

create table board(
category varchar(10),
board_num int primary key,
board_title varchar(20),
board_content varchar(20),
create_at timestamp default current_timestamp,
emp_id varchar(12)
);
desc board;

create table text11(
id varchar(50)
);

insert into text11 values ('진호');

select * from board;

create table board_table(
category varchar(10),
board_num int primary key,
board_title varchar(20),
board_content varchar(20),
create_at timestamp default current_timestamp,
emp_id varchar(12),
boardHits int default 0,
fileAttached int default 0
);


INSERT INTO board_table (category, board_num, board_title, board_content, create_at, emp_id, boardHits, fileAttached)
SELECT 
    category, 
    board_num + 2000 AS board_num, -- 기존 번호에 +100으로 새 번호 설정
    board_title, 
    board_content, 
    CURRENT_TIMESTAMP, 
    emp_id, 
    boardHits, 
    fileAttached
FROM board_table;



select * from board_table;

insert into board_table 90

-- 데이터베이스 연결
USE cis_finalproject;

-- 시퀀스 정보가 담긴 데이터를 생성, 테이블 저장
CREATE TABLE sequences (
name varchar(30),
currval BIGINT UNSIGNED
) ENGINE = InnoDB;

-- DELEMETER : 구분자
-- MODIFIES SQL DATA : 프로시저가 데이터를 수정할 수 있도록 지정
-- DETERMINISTIC : 프로시저가 동일한 입력에 대해 동일한 결과를 항상 생성하도록 설정

-- 시퀀스 정보를 저장할 프로시저 생성
-- 1) DELETE : 프로시저 생성 시 동일한 이름의 시퀀스가 있다면 삭제
-- 2) INSERT : 시퀀스 테이블에 시퀀스 이름과 번호 생성
DELEMETER $$
CREATE PROCEDURE `create_seq` (IN seq_name text)
MODIFIES SQL DATA
DETERMINISTIC
BEGIN
	DELETE FROM sequences WHERE name=seq_name;
	INSERT INTO sequences VALUES (seq_name, 0);
END

-- 시퀀스 번호 저장을 위한 함수 선언
-- DECLARE : 번호를 저장할 변수 선언
-- UPDATE : 시퀀스 이름과 일치하는 데이터를 찾아 시퀀스 번호 증가
-- SELECT : 업데이트 후 변경된 시퀀스 값을 변수에 저장
-- RETURN : 변수 반환
DELEMETER $$
CREATE FUNCTION `nextval3` (seq_name VARCHAR(32))
RETURNS BIGINT UNSIGNED
MODIFIES SQL DATA
DETERMINISTIC
BEGIN
	DECLARE ret BIGINT UNSIGNED;
	UPDATE sequences SET currval=currval+1 WHERE name=seq_name;
	SELECT currval INTO ret FROM sequences WHERE name=seq_name LIMIT 1;
	RETURN ret;
END

-- 시퀀스 생성
CALL create_seq('comment_seq');

use cis_finalproject;
-- 테스트
CREATE TABLE test (
	num INT,
	name VARCHAR(5)
);

INSERT INTO test VALUES ((SELECT nextval3('file_seq') FROM DUAL), '테스트1');

select * from board_table;

delete from board_table where board_num = 4;

select *from board_table where category = '자유게시판';



ALTER TABLE board_table DROP PRIMARY KEY;

ALTER TABLE board_table ADD PRIMARY KEY (category, board_num);

alter table board_table add primary key (category, board_num);

desc board_table;


CREATE TABLE board_file(
    file_id INT NOT NULL auto_increment comment '파일번호(pk)',
    category VARCHAR(10) not null comment '카테고리',        
    board_num INT not null comment '게시글 번호', 
    original_name varchar(255) NOT NULL comment '원본 파일명', 
    save_name varchar(255) NOT NULL COMMENT '저장 파일명',  
    file_size INT(11) not null comment '파일 크기 (byte 단위)',
    delete_yn tinyint(1) NOT NULL COMMENT '삭제 여부',	
    created_date datetime NOT NULL DEFAULT current_timestamp() COMMENT '생성일시',
    deleted_date datetime DEFAULT NULL COMMENT '삭제일시',
    PRIMARY KEY (file_id),
    FOREIGN KEY (category, board_num) 
        REFERENCES board_table (category, board_num) -- 게시글과 연결
        ON DELETE CASCADE -- 게시글 삭제 시 관련 파일 삭제
);

drop table board_file;

CREATE TABLE board_file( /*임시 */
    file_id INT NOT NULL auto_increment comment '파일번호(pk)',
    category VARCHAR(10) not null comment '카테고리',        
    board_num INT not null comment '게시글 번호', 
    save_name varchar(255) NOT NULL COMMENT '저장 파일명',  
    created_date datetime NOT NULL DEFAULT current_timestamp() COMMENT '생성일시',
    PRIMARY KEY (file_id),
    FOREIGN KEY (category, board_num) 
        REFERENCES board_table (category, board_num) -- 게시글과 연결
        ON DELETE CASCADE -- 게시글 삭제 시 관련 파일 삭제
);

desc board_file;

insert into board_file

ALTER TABLE board_file
ADD COLUMN file_size INT;

ALTER TABLE board_file
ADD COLUMN original_name varchar(255);

drop table board_file;
desc board_file;

select * from board_table where category = '자유게시판';

String[] filename;

insert into board_file(file_id, category, board_num, save_name, created date)(
 select category, board_num -- 추가할 필드
 from board_table A left join board_file
 on A.category = B.category
)

desc board_file;
select * from board_file;

-- 
-- private int file_id;                   //파일 num  pk
--     private String category;              //category 게시판 fk
--     private String board_num;           // boardnum id fk
--     private String original_name;       //원본 파일명
--     private String save_name;           // 저장 파일명
--     private int file_size;              //파일 크기
--     private String created_date;    //만든날짜
    
    
    
    
    desc board_table;
    SELECT category, board_num FROM board_table WHERE category = '자유게시판' AND board_num = 1;
   
   
   use cis_finalproject;
  
  desc board_table;
  delete * from board_table where category = 공지사항;
 
 DELETE FROM board_table WHERE category = '공지사항' and board_num = '27';

 DELETE FROM board_table WHERE category = '공지사항';

select * from board_file;

select * from board_table where category = '공지사항';


create table employee(
emp_id varchar(20) primary key,
name varchar(20)
);

insert into employee values ('111', 'dsdf');
drop table employee;
select * from employee;

drop table membertest;

create table comment(
category varchar(10),
board_num int not null,
comment_num int primary key,
comment_content varchar(255) not null,
create_at timestamp default current_timestamp,
emp_id varchar(12), 


CONSTRAINT fk_board_table FOREIGN KEY (category, board_num)
REFERENCES board_table (category, board_num)
ON DELETE CASCADE,
    
    -- 직원 테이블과의 외래 키
CONSTRAINT fk_employee FOREIGN KEY (emp_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL -- 직원 삭제 시 댓글 작성자를 NULL로 설정
);

select * from comment;


desc board_table;
desc comment;

desc boa



use cis_finalproject;
desc employee;

drop table employee;

select * from employee;
delete from employee;

-- 
-- emp_id|name|
-- ------+----+
-- 111   |dsdf|
-- asd   |지온  |
-- 

show create table emloyee;
show create table comment;

desc comment;

SHOW CREATE TABLE comment;

drop table comment;
drop table employee;


-- auto-generated definition
create table manager
(
    resident_num char(14)    not null
        primary key,
    emp_name     varchar(8)  not null,
    emp_dept     varchar(10) not null,
    emp_rank     varchar(5)  not null,
    join_date    date        not null,
    work_status  varchar(20) not null
        check (`work_status` in ('재직중', '퇴사'))
);

-- auto-generated definition
create table employee
(
    emp_id       varchar(12)  not null
        primary key,
    resident_num char(14)     not null,
    emp_pass     varchar(20)  not null,
    emp_email    varchar(30)  not null,
    post_addr    varchar(20)  not null,
    road_addr    varchar(100) null,
    detail_addr  varchar(30)  not null
);


create table comment(
category varchar(10),
board_num int not null,
comment_num int primary key,
comment_content varchar(255) not null,
create_at timestamp default current_timestamp,
emp_id varchar(12), 

CONSTRAINT fk_board_table FOREIGN KEY (category, board_num)
REFERENCES board_table (category, board_num)
ON DELETE CASCADE,
    
    -- 직원 테이블과의 외래 키
CONSTRAINT fk_employee FOREIGN KEY (emp_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL -- 직원 삭제 시 댓글 작성자를 NULL로 설정
);


select * FROM comment c
join employee a
on c.emp_id = a.emp_id
join manager b
on a.resident_num = b.resident_num;




select *from comment;
desc comment;
desc employee;
desc manager;
     



select emp_name
from com





desc comment;


INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('hong', '970812-1172325', '1234', 'hong59@gmail.com', '13480', '경기 성남시 분당구 대왕판교로 477', '101호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_01', '000000-2222222', '1234', 'yuanzhenhao59@gmail.com', '16410', '수원시 인계동', '102호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_02', '000001-1111112', 'abcd1234@!', 'yuanzhenhao02@gmail.com', '17540', '수원시 권선동', '201호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_03', '000002-1111113', 'qwerty!@#', 'yuanzhenhao03@gmail.com', '18450', '수원시 팔달구', '305호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_04', '000003-1111114', 'hello@2024', 'yuanzhenhao04@gmail.com', '19200', '수원시 장안구', '401호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_05', '000004-1111115', 'secure!234', 'yuanzhenhao05@gmail.com', '17800', '수원시 매교동', '101호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_06', '000005-1111116', '!passkey12', 'yuanzhenhao06@gmail.com', '16500', '수원시 고등동', '103호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_07', '000006-1111117', 'safe@#123', 'yuanzhenhao07@gmail.com', '16200', '수원시 세류동', '202호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_08', '000007-1111118', 'lock@123!', 'yuanzhenhao08@gmail.com', '16300', '수원시 화서동', '304호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_09', '000008-1111119', 'key123!@#', 'yuanzhenhao09@gmail.com', '18000', '수원시 우만동', '403호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_10', '000009-1111120', 'my!secure', 'yuanzhenhao10@gmail.com', '17750', '수원시 권선동', '110호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_11', '000010-1111121', 'unique@123', 'yuanzhenhao11@gmail.com', '16450', '수원시 인계동', '502호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_12', '000011-1111122', 'random@pass', 'yuanzhenhao12@gmail.com', '17600', '수원시 매산동', '303호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_13', '000012-1111123', 'myCode!123', 'yuanzhenhao13@gmail.com', '16700', '수원시 팔달동', '408호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_14', '000013-1111124', 'alpha@1234', 'yuanzhenhao14@gmail.com', '16900', '수원시 영통구', '204호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_15', '000014-1111125', 'bravo@5678', 'yuanzhenhao15@gmail.com', '18200', '수원시 광교동', '309호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_16', '000015-1111126', 'charlie@!89', 'yuanzhenhao16@gmail.com', '16650', '수원시 정자동', '507호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_17', '000016-1111127', 'delta#7890', 'yuanzhenhao17@gmail.com', '17050', '수원시 파장동', '606호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_18', '000017-1111128', 'echo$0123', 'yuanzhenhao18@gmail.com', '18300', '수원시 매탄동', '205호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('id_19', '000018-1111129', 'foxtrot@098', 'yuanzhenhao19@gmail.com', '16100', '수원시 신동', '304호');
INSERT INTO employee (emp_id, resident_num, emp_pass, emp_email, post_addr, road_addr, detail_addr) VALUES ('jinho0812', '990012-1112222', 'yuanzhenhao123!@#', 'yuanzhenhao59@gmail.com', '13529', '경기 성남시 분당구 분당내곡로 117', '102호');

select * from employee;
use cis_finalproject;

INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000000-2222222', '원진호', '영업팀', '인턴', '2024-12-20', '퇴사');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000001-1111112', '김지훈', '개발팀', '사원', '2024-12-15', '재직중');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000002-1111113', '박민수', '인사팀', '과장', '2024-11-30', '재직중');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000003-1111114', '이서연', '영업팀', '대리', '2025-01-10', '재직중');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000004-1111115', '정예린', '회계팀', '팀장', '2024-12-01', '재직중');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000005-1111116', '최동훈', '영업팀', '사원', '2024-10-20', '재직중');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000006-1111117', '윤정민', '개발팀', '대리', '2025-03-05', '재직중');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000007-1111118', '조윤아', '영업팀', '과장', '2024-08-12', '재직중');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000008-1111119', '한수진', '인사팀', '사원', '2024-07-07', '재직중');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000009-1111120', '임도현', '회계팀', '대리', '2025-02-25', '재직중');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000010-1111121', '김영훈', '영업팀', '팀장', '2025-04-18', '재직중');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000011-1111122', '송지우', '개발팀', '사원', '2024-09-10', '재직중');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000012-1111123', '권민아', '인사팀', '과장', '2024-06-15', '재직중');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000013-1111124', '이하윤', '영업팀', '대리', '2025-01-01', '재직중');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000014-1111125', '정시우', '회계팀', '사원', '2024-12-22', '재직중');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000015-1111126', '황준호', '영업팀', '팀장', '2024-11-01', '재직중');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000016-1111127', '강민준', '개발팀', '사원', '2024-08-20', '재직중');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000017-1111128', '이수진', '영업팀', '과장', '2025-02-15', '재직중');
INSERT INTO manager (resident_num, emp_name, emp_dept, emp_rank, join_date, work_status) VALUES ('000018-1111129', '박서현', '인사팀', '대리', '2024-05-30', '재직중');

select * from manager;


desc board_table;

select * from comment;

select * from employee;

desc board_table;

desc employee;


ALTER TABLE board_table
ADD CONSTRAINT fk_board_employee
FOREIGN KEY (emp_id)
REFERENCES employee (emp_id)
ON DELETE CASCADE
ON UPDATE CASCADE;

SHOW CREATE TABLE board_table;
SHOW CREATE TABLE employee;

SELECT
    *
FROM
    INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE
    TABLE_NAME = 'board_file1';
   
   desc employee;

  SELECT COUNT(*)
FROM board_table a
JOIN employee e ON a.emp_id = e.emp_id
JOIN manager m ON e.resident_num = m.resident_num
WHERE a.category = '공지사항'
AND a.board_title LIKE '%ㅇ%';


delete from board_table where category = '공지사항';




insert into employee
value ('admin', '111111-3333333','1234','admin@gmail.com','13480', '경기 성남시 분당구 대왕판교로 477','103호');

insert into manager
    value ('111111-3333333','김진호','인사팀','과장', '2024-12-05','재직중');

   
   select *
  from employee e inner join manager m
    on e.resident_num = m.resident_num
where emp_id='admin';